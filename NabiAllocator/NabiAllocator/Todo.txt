This project is my dissertation! (hopefully...)

Tasks:

*Long Term
- Make NabiAllocator a single header (or single .h+.inl+.cpp...) library once it's finished. This will make it easier to export / other people to benchmark.
- Bump the version to 1.0! (Core/Inc/Version.h)

- Profile the use of __forceinline on: (i have never used forceinline before, so it will be interesting to see)
	- BitOperations
	- MemoryOperations
	- HeapZone -> Allocate/Free

- Write a python script to display the memory layout as eg a pie chart (free vs allocated blocks).
	- Is the projects folder structure ok to put this stuff in a place which makes sense?

*General
- Thoughts on NA_ rather than NABI_ALLOCATOR_
	- Would be a lot shorter, then could eg have NA_LOG_[PREP/END] w/o it being too long

- Should MemoryConstants/Operators have its own folder? Also - lower case folder names? 
	- Still on the fence... should the Operations stuff just go in Constants?

- Create the MemoryCommand. If we call it something different, need to update the summary comment in HeapZone.h
- Create functions to Load/Unload BlockInfo into a struct

- I'm unsure how much overlap a free list allocator and segerated list allocator will have...
	- I'm going to put everything for the free list under allocators/freelistallocator for now. this can be refactored later.
		- If anything is generic, it can just go in the root Allocators/ folder along with AllocatorBase
	- the same is with c_BlockAllignment. I'm doing the free list allocator first...
		- maybe this block allignment can actually be a constant inside the allocator?

Archive:
- Write a test for MemoryOperations::IsAlligned. And think - should the memory allignment be different on x64 and x86?
	- Depending on the architecture, then eg the FreeList nodes will / won't fit within 8 bytes
		- Actually, this is ok because we do the if (numBytes < sizeof(FreeListNode)) check. 
	- Should this IsAlligned function take in/cast to uPtr not u32? Just cast? 
		- Therefore should c_BlockALlignment be uPtr?
- Do we need tests for utils? [No, I don't think so] What is the difference between utils and operations? [yh i know now]
- Make .hint file and add all macros
- Should we have the "Memory" folders/filters? Or should it be called something else
	- Because the whole project is just for the allocator, we dont have to bury things all inside a 'memory' folder...
		- Actually, I think that it should all be in there. do some more organisiing. Eg HeapZone folder, Alloctaor folder,
		  and I think that the Operations should also go inside the Memory parent folder
