This project is my dissertation! (hopefully...)

Resources:
* Videos
- "What does it take to design a memory allocator?" https://www.youtube.com/watch?v=UTii4dyhR5c (+ the playlist)
- "Introduction to General Purpose Allocation" https://youtu.be/MvDUe2evkHg?feature=shared (+ the playlist)

* Articles
- "Writing a memory allocator" http://dmitrysoshnikov.com/compilers/writing-a-memory-allocator/
- "Writing your own memory allocator" https://screwjankgames.github.io/engine%20programming/2020/09/24/writing-your-own-memory-allocators.html

* Other
- Profiling: https://learn.microsoft.com/en-us/visualstudio/profiling/profiling-feature-tour?view=vs-2022
- If we need to access the private members of a class for testing, see this: https://stackoverflow.com/a/23267346/8890269

Tasks:

*Long Term
- Make NabiAllocator a single header (or single .h+.inl+.cpp...) library once it's finished. This will make it easier to export / other people to benchmark.
- Bump the version to 1.0! (Core/Inc/Version.h)

- Profile the use of __forceinline on: (i have never used forceinline before, so it will be interesting to see)
	- BitOperations
	- MemoryOperations
	- HeapZone -> Allocate/Free

- Write a python script to display the memory layout as eg a pie chart (free vs allocated blocks).
	- Is the projects folder structure ok to put this stuff in a place which makes sense?

*General
- Next up we need to write the segerated list allocator, and also do some more reading into the free list allocator design.
- Then we need to learn how to profile and optimise what we have!
- My first attempt is using more memory and taking more than than just malloc/free. Based off a very basic test though.
	- Though tbh, it being slower in the end doesn't really matter. Its more about anylsing *why* it is slower and profiling / comparing to
	  other allocators and research papers. This is where the marks are at!
	- Take a look at the VS profiling tools https://learn.microsoft.com/en-us/visualstudio/profiling/profiling-feature-tour?view=vs-2022
		- Make sure you make notes of any things you profile and adjust. These will probs be good in write up

	- Also just read this: https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/c-custom-memory-allocation-r3010/
		- And the other artciesl on my 300 word doc
		- That allocator is much faster than mine! Why?

- Thoughts on NA_ rather than NABI_ALLOCATOR_
	- Would be a lot shorter, then could eg have NA_LOG_[PREP/END] w/o it being too long
- Thoughts on sizeT rather than uInt...

- Should MemoryConstants/Operators have its own folder? Also - lower case folder names? 
	- Still on the fence... should the Operations stuff just go in Constants?

- find a fix so we dont have to reintrepret cast nulltpr and add.
	- yh defo fix this, its jank

- Create the MemoryCommand. If we call it something different, need to update the summary comment in HeapZone.h
- Create functions to Load/Unload BlockInfo into a struct

- I'm unsure how much overlap a free list allocator and segerated list allocator will have...
	- I'm going to put everything for the free list under allocators/freelistallocator for now. this can be refactored later.
		- If anything is generic, it can just go in the root Allocators/ folder along with AllocatorBase
	- the same is with c_BlockAllignment. I'm doing the free list allocator first...
		- maybe this block allignment can actually be a constant inside the allocator? [DONE]
	- what about c_MinBlockSize? I've put this as an assert inside the allocator for now

- debug_[method name/var name] for debug stuff (eg heapzone getdebugname), same with test stuff? test_?

- should things like AllocatorUtils have there own namespace? and allocatorstats?

- Should AllocatorBase have a construtor for m_AllocatorStats? or not? (if so, remember to call it in FreeListAllocator.inl)
- Make sure you test running with defines on / off and x64/86 etc
- Should defines, like NABI_ALLOCATOR_TRACK_ALLOCATIONS toggle if headers are included or not? eg AllocatorStats in AllocatorBase.h

- Make sure there is a default allocator that just uses malloc/free, not even a heap zone. have a heap zone scope for this

- Remember, the HeapZone should have no knwoledge of the memory command
	- Will probs have to reigster a heap zone with the memory command
		- Perhaps a macro to do this?
			- Macro can construct the heap zone and register with the supplied tag (for the heap zone scope)

- The basic interface tests for the free list allocator (eg, allocating/freeing/usage with heapzone) will be the same for all allocators.
  Therefore, once we have written / tested the tests perhaps package them up into a macro or something. We could do like
  NABI_ALLOCATOR_IMPLEMENT_ALLOCATOR_BASIC_TESTS(testFixtureName, allocType) and this would create the gTest TEST macros
  for the basic tests which we could use for all allocators. [could we?]

- Should GetMemoryLayout be in its own namespace and be debug only?

- note the final comment about no debug heap
	- https://stackoverflow.com/questions/13064850/malloc-vs-custom-allocator-malloc-has-a-lot-of-overhead-why

Archive:
- Write a test for MemoryOperations::IsAlligned. And think - should the memory allignment be different on x64 and x86?
	- Depending on the architecture, then eg the FreeList nodes will / won't fit within 8 bytes
		- Actually, this is ok because we do the if (numBytes < sizeof(FreeListNode)) check. 
	- Should this IsAlligned function take in/cast to uPtr not u32? Just cast? 
		- Therefore should c_BlockALlignment be uPtr?
- Do we need tests for utils? [No, I don't think so] What is the difference between utils and operations? [yh i know now]
- Make .hint file and add all macros
- Should we have the "Memory" folders/filters? Or should it be called something else
	- Because the whole project is just for the allocator, we dont have to bury things all inside a 'memory' folder...
		- Actually, I think that it should all be in there. do some more organisiing. Eg HeapZone folder, Alloctaor folder,
		  and I think that the Operations should also go inside the Memory parent folder
