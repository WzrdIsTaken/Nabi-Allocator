This project is my dissertation! (hopefully...)

Resources:
* Videos / Lectures
- "What does it take to design a memory allocator?" https://www.youtube.com/watch?v=UTii4dyhR5c (+ the playlist)
- "Introduction to General Purpose Allocation" https://youtu.be/MvDUe2evkHg?feature=shared (+ the playlist)
- "Parallelizing the Naughty Dog Engine" https://www.gdcvault.com/play/1022186/Parallelizing-the-Naughty-Dog-Engine (the memory part of this)

* Articles
- "Writing a memory allocator" http://dmitrysoshnikov.com/compilers/writing-a-memory-allocator/
- "Writing your own memory allocator" https://screwjankgames.github.io/engine%20programming/2020/09/24/writing-your-own-memory-allocators.html
- "C++: Custom memory allocation" https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/c-custom-memory-allocation-r3010/
- "Building a Low Fragmentation Memory Allocator" https://www.gdcvault.com/play/1023005/Building-a-Low-Fragmentation-Memory

* Other
- Profiling: https://learn.microsoft.com/en-us/visualstudio/profiling/profiling-feature-tour?view=vs-2022
             https://learn.microsoft.com/en-us/visualstudio/profiling/beginners-guide-to-performance-profiling?view=vs-2019
- If we need to access the private members of a class for testing, see this: https://stackoverflow.com/a/23267346/8890269

Notes:
- A large block of memory should be allocated when the program starts using malloc (and this should be the only malloc made) this 
  large block of memory is managed by a global allocator (for example a stack allocator). Each subsystem should then allocate the block of
  memory it needs to work from the global allocator, and create allocators that will manage that memory.
	- From the gamedev.net article. Looks like we need a basic allocator as well? We were already going to make an unmanagedalloctor 
	  (just a wrapper around malloc/free) - but we might need something else below this?
	- The heap zone parent stuff will allow for this elegantly 
	- We can also mention this design structure in the dis

- Note the final comment about no debug heap
	- https://stackoverflow.com/questions/13064850/malloc-vs-custom-allocator-malloc-has-a-lot-of-overhead-why
	- also /FA or debugger output to view generated assembly

Tasks:

*Long Term

*General

Archive:
- Make NabiAllocator a single header (or single .h+.inl+.cpp...) library once it's finished. This will make it easier to export / other people to benchmark.
- Bump the version to 1.0! (Core/Inc/Version.h) (in the single header as well!)

- Profile the use of __forceinline on: (i have never used forceinline before, so it will be interesting to see)
	- BitOperations X [see profiling google doc]
	- MemoryOperations
	- HeapZone -> Allocate/Free

- Make sure you test running with defines on / off and x64/86 etc. All combinations before submission!

- Remember C:\Users\Ben\Desktop\Uni\Year 3\Dissertation -> Lots of good stuff in here for the writeup
- And a bunch of google docs with notes on
- Remember to talk about the data pointer / any thing else that we did but didnt quite work. That investigation stuff is super important in a report!
	- Also research cirular buffers & understand virtual memory. These could also make a good section

- Something to investigate / understand is virtual memory in the context of - when the OS gives memory to an application it gives it in a way
  that every application thinks it has a block going from 0 -> end..? perhaps..? can this memory be non contigous? eg the application thinks it
  is but in reality its not?

- Find if things have been overriden by checksums [ask brandon] [ngl idk if this is something i can be asked to do. but we can write about it in report]

- Will be interesting to profile with NA_THREAD_SAFE_HEAP_ZONE on and off
- Will be good to profile FirstFit vs BestFit, and compair the memory layouts they produce
- Could profile using [[likely]]/[[unlikely]] if we have a good usecase? X [see profiling google doc]
- Then we need to learn how to profile and optimise what we have as much as we can! [AS OF 04/12/23 WE HAVE DONE ENOUGH. JUST POSTER STUFF NOW]
	- Apperently the TryCoalesceBlock function is the slowest now. It has some futher function calls in it though, and I can't see exactly what I can push futher right now.
	- The memory command is also kinda slow...
		- We have a lot of branching in MemoryCommand::Allocate/Free
		- We could remove some branching if we just pushed back the unamanged heap by default into the list?
			- But would that play nice with the thread local list? (I think it would be fine)
			- Update this comment if we do that? "Static allocations will happen through the default allocation path, set as std::malloc/std::free."
			- UPDATE - It will play nice but adding the scope in the first place in an elegant way will be hard
				- Need to reset / think about it again. tl;dr the problem is that std containers one brandon mentioned a while back
				- But all this will only remove one branch in Allocate anyway i think :p
			- UPDATE 2 - I tried to make a direct heap zone thing but had some problems. Anyway, I think that everything is more than fast enough
			  for a solid submission. I've scratched my optimisation itch, now just work on the poster up until that deadline. Also got other assignments to do...
	- As of 04/02/24 We can optimise more if needed, and I have some ideas about what I can change, but tbh I think we've done enough and any of our other 
	  ideas can just go in the future work section...
- Probs the thing to do now is start writing the docs for the user study. The interface of the allocator won't change right <--this!
	- Remeber to document that you can use the short namespace. NA_DEFINE_SHORT_NAMESPACE
	- Tbh, well document all of the defines and there usages / what will and will not be considered if you toggle them on / the define dependencies
- Check over what we have done.  DONE
- Perhaps its good to have a AllocateTooLarge test in DefaultAllocatorTests? Should just check nullptr is returned, can do the same IF_DEBUG return thing DONE
- Then mirror what we have done in the single header and commit DONE
- THEN
- 2 Bugs:
	- 1) When you overallocate with the stack allocator it crashes rather than returning nullptr DONE
	- 2) Data ptr tests sometimes fail??? DONE
		- Perhaps its because on x86 systems we dont actually have 8 free bits? double check the number of free bits we have
		- Rename tagged ptr to data ptr as well
- After the poster submission we have 3 things to do:
	- 1) More optimisation (just take it easy, read the notes below)
	- 2) Probs start with this - look into more advanced memory management techniques. Will be interesting for report. Eg: cirular buffers, understand virtual memory,
	     how to use the unused pointers of a bit. These things don't have to go into the allocator, can just make a new C++ proj and play around with them.
	- 3) Start prepping for user study
		- Need to write some solid documentation for my allocator for the user research stuff
		- [move the other notes under here to a different section]
- “The value of TS should be large enough to allow a sufficient number of different tag values (i.e. at least 4 to provide ~ 16 tag values) and
   small enough to fit into the unused upper bits of a pointer (usually up to 8 or 16, depending on the architecture). TS also affects the 
   complexity and the size of the tag storage.” This is how we have zero byte tagging! Combined with Molly Rocket’s video on seeing if memory 
   is used.. This could be really interesting. Find that video on pointer buckets.
	-> Can we just store the infomation which is currently in BlockInfo in the pointer? We could work out the size of blocks via pointer maths instead of explicity storing it
		-> Tried this, didn't actually work when I put more thought into it.
- Also probs a good idea to wrap the gtest includes in NA_TESTS? so ppl can grab the library and easily get rid of depencieis (in the single include)
- Test __forceline for the data pointer
- READ THE ABOVE^^^
- We have made the data pointer, and the NA_DATA_PTR_TAGGING define. 
- TIMEBOX the data pointer stuff. if it ends up going no where or taking longer than we thought, just stop and focus on other parts of the proj. hopefully wont take too long though..??
- Write a python script to display the memory layout as eg a pie chart (free vs allocated blocks).
	- Is the projects folder structure ok to put this stuff in a place which makes sense?
	- Also a script to graph out the different allocator's performance? (malloc/free/total vs) (+ vs default malloc)
- It looks like the MemoryCommand is in need of some optimisation... It is comparable with the unmanaged heap in terms of speed even though the underlying allocators
  are faster
- Thoughts on inlining some of the functions in mem command?
- Thoughts on using [[likely]]/[[unlikely]]?
	- If we remove them or decide 100% then remove the questionging comment in notes. [ngl the perf difference is so small anyway... but i think its right]
- ***30/11/2023 after a day of painful vr stuff, the todos-i-need-to-do-in-order-to-submit-this-project are done!***
	- ;;;__;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
- Is the custom memory command actually a valid piece of logic? BEcause if NA_OVERRIDE_NEW_DELETE is not enabled, then we actually have to use it
  If we decide it is, can remove the comments saying the logic is bot in heapzonescope (top comment and next to the var itself) (and other places..?)
- Double check that the full workflow stuff is working ok... we are allocating a freelistallocator into a stack allocator with the same numbytes.. shoudlnt this fail?
	- [Again, I'm not 100% sure what I was seeing here. I think its ok now..?]
- Basic workflow test which does std::move? remember what brandon said [tbh i think its fine...]
- see this for proper new/delete replacement
  https://stackoverflow.com/questions/4134195/how-do-i-call-the-original-operator-new-if-i-have-overloaded-it
	- "dynamic exception specifications are valid only in C++14 and earlier; treating as noexcept(false)"
- If we change the default allocation in the memory command to eg a pre created heap zone, then change the notes comment
   "Static allocations will happen through the default allocation path, set as std::malloc/std::free."
		- I think the unmanaged heap will have to be set up by the user, cos otherwise we will have some static variabls allocated there and others just by cpp
	    -  We can just have a macro called like NA_SETUP / NA_DEFAULT_SETUP in a new config file, and they will set up an unmanaged heap and a statck/free list alloc on atop?
- can we assert if through the memory command we make an allocation too big? it just seems to crash atm [honeslty the assert logic is already there]
	- Can fix some other time if the problem comes up. idk if this was what i was even seeing tbh
- We also have some ctrl+f todods [I think they are all done now though?]
- Should block headers / footers / other stuff be [header/footer] const* const? (where they can - check!) [we could do this... but its honeslty not worth going back]
- Ops on inlinging some of MemoryCommand's functions? & [[likely]] and [[unlikely]] annotation?
- In the memory command, is the way we are routing to the default malloc/free most optimimal? (and just the general routing to the heap zone i guess..)
- In the memory command, I'm using [[likely]] & [[unlikely]] in the implementation... thoughts on their usage?
	- 
	- **I think this is something we could benchmark and then write about on dis..?**
- Can we rename the containing folder to just "Allocator"? (so its Allocator, Tools) or would that cause too many error
- Write some "full workflow benchmarks"
  eg something which goes through the overridden/default new/delete operators. Then we can really benchmark [doesnt have to acc go through these, just mem command]
  just like the other one. loops and the like probs
- On all Python graphs have a label / legend - total alloc/ total free etc?
	- https://stackoverflow.com/questions/19125722/adding-a-matplotlib-legend
	- https://stackoverflow.com/questions/63799934/how-to-annotate-a-bar-plot-and-add-a-custom-legend
- have a test for c_SameTag and c_SameZone
- Have a test for the mutex/scopedlock/NA_THREAD_SAFE_HEAP_ZONE stuff
- write some tests for this unamanged heap stuff..
- i think if someone is using a memory allocator, they have some basic level of competiceyc :p
- I think we have a todo above, but we need to make sure our implemenation still calls consturctors / destructors.
- I think this needs to be done for when we default malloc/free as well [actually, maybe not?]
- And then start bringing it all together with the new/delete operator overrides. Then all these other todos and python utils!
- About time we make the unmanaged allocator/heap zone i recon. this is needed for some tests and just generally
- Test for memory tag scopes / heap zone changing. (Unless this is handled in MemoryCommand? Add the test there if not) [WIP]
	- This is WIP, we need the unmanaged allocator
- Allocate/Free multiple test?  in default tests? [cba to write out all the possible values... this is tested in FullWorkflow / Benchmark anyway]
- std::optional<std::function>>> *const*? <-?? wtf is this?
- Should my local std::function definitions be const? [like in AllocatorUtils.inl] and std::functions being passed into functions?
- If I manually free memory, do i need to call that memory's destructor?
	- YES! you do [maybe???]. In eg ReleaseMemoryToOS you can do memory->~T();
	- What about memorys constructor?
	- Think about the best place to do this. Would it be in ReleaseMemoryToOS and HeapZone->Free? Then RequestMemoryFromOS and HeapZone->Allocate..?
		- With constructors, would we have to perfect forward the constructors arguements?
- note - it will be heap zone now memory command which had the mutex
  right?
  unamnaged alloc can still support memory tsgging
  perhaod just create it (it will just be two funcs) statvially and ?
  have a maxro like "na defaukt setup" whicu creates the stuff w/you having to do abything? i think at least once macro is good though for the setup
- Is it worth having memory tracking etc inthe unamanaged heap? hoesntly, i think not. its meaant to be simple zero overhead. thats what it is
- Also in the dis, like the lecturerer said, if youve done something once you dont need to do it over and over again to show knolwedge
- Should the memory command be thread local?
	- Perhaps this is something to test/benchmark
		- implement a macro like NA_THREAD_LOCAL_SINGLETON static MemoryCommand* ThreadLocalGet() {
			thread_local MemoryCommand d;
			return &d;
		}
	- I think there is a gap in my understanding here, research more
-  We should have only written std::malloc/std::free at one point in the program: in MemoryConstants.inl [and in the default allocator for benchmarks]
- Lower case folder names? [Perhaps this would have been good to do at the start... but i cba to refactor everything now]
- do the test blueprints need the extra namespace as well..? [i think these should stay..?]
- use NA_WRAP where we are doing \" \" atm?
- Make sure there is a default allocator that just uses malloc/free, not even a heap zone. have a heap zone scope for this
- We also need a stack allocator / linear allocator. something basic just to be the parent of the other allocators
- So: Unmanaged allocator, thread safe allocations. Then kinda done I think
- Make the allocations thread safe? std::scoped_lock in HeapZone alloc/free?
- static std::vector<HeapZoneBase*> s_AllHeapZones; in cpp?
- Gotta find somewhere we can wack a goto in our code... :D
- Python ultities
- ^ These are the focus rn. Get the project into a submittable state!
- Annotate the MemoryCommand::Allocate/Free if checks with likely and unlikely as well?
- Should NA_IMPLEMENT_SINGLETON return a reference not a pointer? static Type t; return t; not &? research
- NA_HEAP_ZONE_SCOPE -> NA_SET_HEAP_ZONE_SCOPE? (if so, update this in tests and hint file)
- take free list allocator / stack allocator out of there namespaces? its a little clunky i think...
- A macro to make the NA_CONCAT(NA_XSTR(NA_BENCHMARK_IDENTIFIER), NA_GTEST_FILTER_SEPERATOR) stuff in main.cpp one thing? (we call this code 3 times)
- Same deal for test constant's NA_CONCAT(NA_EXPAND(NA_TEST_IDENTIFIER), testFixtureName) (used 3 times)
- should things like AllocatorUtils have there own namespace? and allocatorstats? [honestly, i think i like it the way it is..?]
- Thoughts on sizeT rather than uInt... (acc maybe not..)
- Create the MemoryCommand. If we call it something different, need to update the summary comment in HeapZone.h
	- Remember, the HeapZone should have no knwoledge of the memory command
		- Will probs have to reigster a heap zone with the memory command
			- Perhaps a macro to do this?
				- Macro can construct the heap zone and register with the supplied tag (for the heap zone scope) [we are doing it in a different way now]
- helper function to convert the memory usage to %? same with the memory layout? [nah we can do this in python, or well matplotlib can do it]
- Write a test for heap zone parent functionality. This can be done once we have an unmanged allocator or something in heap zone tests
- Heap zone parent test?
- Next up we need to write the segerated list allocator, and also do some more reading into the free list allocator design.
	- If we dont implement it (see the disseration folder on pc for notes for both coding it and disseration writeup)
	- The basic interface tests for the free list allocator (eg, allocating/freeing/usage with heapzone) will be the same for all allocators.
	  Therefore, once we have written / tested the tests perhaps package them up into a macro or something. We could do like
      NA_IMPLEMENT_ALLOCATOR_BASIC_TESTS(testFixtureName, allocType) and this would create the gTest TEST macros
      for the basic tests which we could use for all allocators. [could we?] {already did this a while back}
- MemoryCommand, heap zone scopes, memory tag scope, all this stuff.
	- For the memory tag tests, make sure the memory tag enum's type is MemoryConstant.h's MemoryTag
- Make sure you implement the other free list node implementation
	- Wasn't worth doing. See "random engine ideas" -> NA_FREE_LIST_NODE_PTRs. Sure this would have made the size smaller on x64.. but then we could run out of range.
	  Plus, its very error prone.
- Stack allocator (this way it will still work with the benchmarks, rather than a linear allocaotr)
- Add clear call to allocators..? [reset]
- Should GetMemoryLayout be in its own namespace and be debug only? [no(?) and no]
- Should defines, like NA_TRACK_ALLOCATIONS toggle if headers are included or not? eg AllocatorStats in AllocatorBase.h
	- [I think this is a slippery slope with includes and probs just not worth it. could end up with end ifs everywhere. besides, matt said not to do it i think]
- debug_[method name/var name] for debug stuff (eg heapzone getdebugname), same with test stuff? test_? [i think its ok tbh]
- Should AllocatorBase have a construtor for m_AllocatorStats? or not? (if so, remember to call it in FreeListAllocator.inl)
- Should MemoryConstants/Operators have its own folder? 
	- Still on the fence... should the Operations stuff just go in Constants?
- Thoughts on NA_ rather than NA_ [half done]
	- Would be a lot shorter, then could eg have NA_LOG_[PREP/END] w/o it being too long <-- DEFO need this. eg for the benchmark logging the file line is ugly
	- add new macros to hint
- find a fix so we dont have to reintrepret cast nulltpr and add.
	- yh defo fix this, its jank
- Remove the "test" from variables in the test scripts.. we know its tests!!
- I'm unsure how much overlap a free list allocator and segerated list allocator will have... [i think what we've got is ok]
	- I'm going to put everything for the free list under allocators/freelistallocator for now. this can be refactored later.
		- If anything is generic, it can just go in the root Allocators/ folder along with AllocatorBase
	- the same is with c_BlockAllignment. I'm doing the free list allocator first...
		- maybe this block allignment can actually be a constant inside the allocator? [DONE]
	- what about c_MinBlockSize? I've put this as an assert inside the allocator for now
- Create functions to Load/Unload BlockInfo into a struct
- Pass std::function by ref of val?
- Mark 1 arg constructros as explicit
- My first attempt is using more memory and taking more than than just malloc/free. Based off a very basic test though. [fixed this B)]
	- Though tbh, it being slower in the end doesn't really matter. Its more about anylsing *why* it is slower and profiling / comparing to
	  other allocators and research papers. This is where the marks are at!
	- Take a look at the VS profiling tools https://learn.microsoft.com/en-us/visualstudio/profiling/profiling-feature-tour?view=vs-2022
		- Make sure you make notes of any things you profile and adjust. These will probs be good in write up
	- Also just read this: https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/c-custom-memory-allocation-r3010/
		- And the other artciesl on my 300 word doc
		- That allocator is much faster than mine! Why?
- Add a parent zone functionality to heapzone? This would allow us to only do one large allocation with like a stack or linear allocator more elegantly.
- Write a test for MemoryOperations::IsAlligned. And think - should the memory allignment be different on x64 and x86?
	- Depending on the architecture, then eg the FreeList nodes will / won't fit within 8 bytes
		- Actually, this is ok because we do the if (numBytes < sizeof(FreeListNode)) check. 
	- Should this IsAlligned function take in/cast to uPtr not u32? Just cast? 
		- Therefore should c_BlockALlignment be uPtr?
- Do we need tests for utils? [No, I don't think so] What is the difference between utils and operations? [yh i know now]
- Make .hint file and add all macros
- Should we have the "Memory" folders/filters? Or should it be called something else
	- Because the whole project is just for the allocator, we dont have to bury things all inside a 'memory' folder...
		- Actually, I think that it should all be in there. do some more organisiing. Eg HeapZone folder, Alloctaor folder,
		  and I think that the Operations should also go inside the Memory parent folder
